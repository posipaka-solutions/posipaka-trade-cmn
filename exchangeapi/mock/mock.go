// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/posipaka-trade/posipaka-trade-cmn/exchangeapi (interfaces: ApiConnector)

// Package mock_exchangeapi is a generated GoMock package.
package mock_exchangeapi

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	order "github.com/posipaka-trade/posipaka-trade-cmn/exchangeapi/order"
	symbol "github.com/posipaka-trade/posipaka-trade-cmn/exchangeapi/symbol"
)

// MockApiConnector is a mock of ApiConnector interface.
type MockApiConnector struct {
	ctrl     *gomock.Controller
	recorder *MockApiConnectorMockRecorder
}

// MockApiConnectorMockRecorder is the mock recorder for MockApiConnector.
type MockApiConnectorMockRecorder struct {
	mock *MockApiConnector
}

// NewMockApiConnector creates a new mock instance.
func NewMockApiConnector(ctrl *gomock.Controller) *MockApiConnector {
	mock := &MockApiConnector{ctrl: ctrl}
	mock.recorder = &MockApiConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiConnector) EXPECT() *MockApiConnectorMockRecorder {
	return m.recorder
}

// AddLimits mocks base method.
func (m *MockApiConnector) AddLimits(arg0 symbol.Limits) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddLimits", arg0)
}

// AddLimits indicates an expected call of AddLimits.
func (mr *MockApiConnectorMockRecorder) AddLimits(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLimits", reflect.TypeOf((*MockApiConnector)(nil).AddLimits), arg0)
}

// GetAssetBalance mocks base method.
func (m *MockApiConnector) GetAssetBalance(arg0 string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetBalance", arg0)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetBalance indicates an expected call of GetAssetBalance.
func (mr *MockApiConnectorMockRecorder) GetAssetBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetBalance", reflect.TypeOf((*MockApiConnector)(nil).GetAssetBalance), arg0)
}

// GetCurrentPrice mocks base method.
func (m *MockApiConnector) GetCurrentPrice(arg0 symbol.Assets) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentPrice", arg0)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentPrice indicates an expected call of GetCurrentPrice.
func (mr *MockApiConnectorMockRecorder) GetCurrentPrice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentPrice", reflect.TypeOf((*MockApiConnector)(nil).GetCurrentPrice), arg0)
}

// GetOrdersList mocks base method.
func (m *MockApiConnector) GetOrdersList(arg0 symbol.Assets) ([]order.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersList", arg0)
	ret0, _ := ret[0].([]order.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersList indicates an expected call of GetOrdersList.
func (mr *MockApiConnectorMockRecorder) GetOrdersList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersList", reflect.TypeOf((*MockApiConnector)(nil).GetOrdersList), arg0)
}

// GetServerTime mocks base method.
func (m *MockApiConnector) GetServerTime() (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerTime")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerTime indicates an expected call of GetServerTime.
func (mr *MockApiConnectorMockRecorder) GetServerTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerTime", reflect.TypeOf((*MockApiConnector)(nil).GetServerTime))
}

// GetSymbolLimits mocks base method.
func (m *MockApiConnector) GetSymbolLimits(arg0 symbol.Assets) (symbol.Limits, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSymbolsLimits", arg0)
	ret0, _ := ret[0].(symbol.Limits)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSymbolLimits indicates an expected call of GetSymbolLimits.
func (mr *MockApiConnectorMockRecorder) GetSymbolLimits(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSymbolsLimits", reflect.TypeOf((*MockApiConnector)(nil).GetSymbolLimits), arg0)
}

// GetSymbolsList mocks base method.
func (m *MockApiConnector) GetSymbolsList() []symbol.Assets {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSymbolsList")
	ret0, _ := ret[0].([]symbol.Assets)
	return ret0
}

// GetSymbolsList indicates an expected call of GetSymbolsList.
func (mr *MockApiConnectorMockRecorder) GetSymbolsList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSymbolsList", reflect.TypeOf((*MockApiConnector)(nil).GetSymbolsList))
}

// SetOrder mocks base method.
func (m *MockApiConnector) SetOrder(arg0 order.Parameters) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOrder", arg0)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetOrder indicates an expected call of SetOrder.
func (mr *MockApiConnectorMockRecorder) SetOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrder", reflect.TypeOf((*MockApiConnector)(nil).SetOrder), arg0)
}

// UpdateSymbolsList mocks base method.
func (m *MockApiConnector) UpdateSymbolsList() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSymbolsList")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSymbolsList indicates an expected call of UpdateSymbolsList.
func (mr *MockApiConnectorMockRecorder) UpdateSymbolsList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSymbolsList", reflect.TypeOf((*MockApiConnector)(nil).UpdateSymbolsList))
}
